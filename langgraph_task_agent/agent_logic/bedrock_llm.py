import boto3
import json
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configuration - can be moved to a config file or passed as arguments
AWS_REGION_NAME = os.getenv("AWS_REGION", "us-east-1") # Default to us-east-1 if not set
MODEL_ID = "anthropic.claude-v2" # Using Claude v2

# Initialize Bedrock client (cached for multiple calls)
_bedrock_client = None

def get_bedrock_client():
    global _bedrock_client
    if _bedrock_client is None:
        _bedrock_client = boto3.client(
            service_name="bedrock-runtime",
            region_name=AWS_REGION_NAME,
            # Credentials will be loaded from environment variables or IAM role
        )
    return _bedrock_client

def invoke_claude_v2(prompt: str, system_prompt: str = None, max_tokens: int = 4096, temperature: float = 0.7) -> str:
    """
    Invokes the Anthropic Claude v2 model on AWS Bedrock.

    Args:
        prompt (str): The main prompt for the Human turn.
        system_prompt (str, optional): The system prompt. If provided, it's prepended to the user prompt.
        max_tokens (int, optional): The maximum number of tokens to generate. Defaults to 4096.
        temperature (float, optional): The temperature for sampling. Defaults to 0.7.

    Returns:
        str: The text generated by the model.

    Raises:
        Exception: If the Bedrock API call fails.
    """
    try:
        client = get_bedrock_client()

        # Construct the prompt for Claude
        # Claude expects a single string with "Human:" and "Assistant:" turns.
        # System prompt is typically placed at the beginning of the first Human turn.
        if system_prompt:
            full_prompt = f"Human: {system_prompt}\n\nHuman: {prompt}\n\nAssistant:"
        else:
            full_prompt = f"Human: {prompt}\n\nAssistant:"

        body = json.dumps({
            "prompt": full_prompt,
            "max_tokens_to_sample": max_tokens,
            "temperature": temperature,
            # "top_k": 250, # Optional: Add if needed
            # "top_p": 0.999, # Optional: Add if needed
            "anthropic_version": "bedrock-2023-05-31" # Recommended for Claude 2/2.1
        })

        response = client.invoke_model(
            body=body,
            modelId=MODEL_ID,
            accept='application/json',
            contentType='application/json'
        )

        response_body = json.loads(response.get('body').read())
        completion = response_body.get('completion')

        if completion is None:
            raise Exception("Bedrock response did not contain 'completion' field.")

        return completion

    except Exception as e:
        print(f"Error invoking Bedrock Claude v2: {e}")
        # In a real application, you might want to raise a custom exception
        # or handle this more gracefully (e.g., retries)
        raise

if __name__ == '__main__':
    # Example usage (requires AWS credentials and Bedrock model access to be configured)
    # You would typically set AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION
    # as environment variables or have an IAM role configured.
    print("Attempting to invoke Claude v2 on Bedrock...")
    print("Make sure your AWS credentials and region are configured, and you have access to anthropic.claude-v2.")
    print("You can set AWS_REGION in your .env file or as an environment variable.")

    example_system_prompt = "You are a helpful assistant that provides concise answers."
    example_prompt = "What is the capital of France?"

    try:
        # Create a dummy .env file for the example if it doesn't exist
        if not os.path.exists(".env"):
            with open(".env", "w") as f:
                f.write("# AWS_REGION=us-east-1 # Replace with your desired region if not us-east-1\n")
                f.write("# AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY\n")
                f.write("# AWS_SECRET_ACCESS_KEY=YOUR_SECRET_KEY\n")
            print("Created a dummy .env file. Please configure your AWS credentials and region in it if needed.")

        print(f"Using AWS Region: {AWS_REGION_NAME}")
        print(f"Using Model ID: {MODEL_ID}")

        response_text = invoke_claude_v2(example_prompt, system_prompt=example_system_prompt)
        print("\nClaude v2 Response:")
        print(response_text)
    except Exception as e:
        print(f"\nExample invocation failed. Error: {e}")
        print("Please ensure your AWS environment is correctly set up and you have Bedrock access.")
        print("This might involve setting AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN (if using temporary credentials) environment variables, or configuring an IAM role.")
